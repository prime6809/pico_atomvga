/**
 * Copyright (c) 2021 Chris Moulang
 *
 * SPDX-License-Identifier: BSD-3-Clause
*/
.program test

.define public PIN_A0 2
.define public PIN_1MHZ 18
.define public PIN_R_NW 19
.define public PIN_SEL1 26

.define NOTHING 0b111
.define ADDRESS_LOW 0b011
.define ADDRESS_HIGH 0b101
.define DATA 0b110

//.define tSELECT 3   ; = 20nS at 150MHz
.side_set 3 opt
    wait 0 GPIO PIN_1MHZ                                ; ensure SM starts at beginning of a bus cycle

loop:
    wait 1 GPIO PIN_1MHZ    side ADDRESS_LOW            ; wait for clock 0 -> 1

    in PINS 8                                           ; read address 0-7
    jmp PIN handle_read     side ADDRESS_HIGH           ; test for read and select address 8-15
    nop [1]                                             ; delay until 74lvc245 is ready
    nop [1]
    set y 1 [1]
    in PINS 8                                           ; read address 8-15

    wait 0 GPIO PIN_1MHZ    side DATA                   ; wait for clock 1 -> 0
    in PINS 8                                           ; read data
    in y 8                                              ; 1 indicates 6502 write
    jmp loop

handle_read:
    nop [1]                                             ; delay until 74lvc245 is ready
    nop [1]
    nop [1]
    in PINS 8                                           ; read address 8-15
    in NULL 16                                          ; pad with 0's
    wait 0 GPIO PIN_1MHZ                                ; wait for clock 1 -> 0

    jmp loop

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void test_program_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = test_program_get_default_config(offset);
   sm_config_set_jmp_pin 	(&c, test_PIN_R_NW);
   sm_config_set_in_pins(&c, test_PIN_A0);
   sm_config_set_set_pins(&c, test_PIN_SEL1, 3);

   sm_config_set_sideset(&c, 4, true, false);
   sm_config_set_sideset_pins(&c, test_PIN_SEL1);

   sm_config_set_in_shift(&c, true, true, 32);
   pio_sm_set_consecutive_pindirs (pio, sm, test_PIN_SEL1, 3, true);
   pio_sm_init(pio, sm, offset, &c);
}

%}
