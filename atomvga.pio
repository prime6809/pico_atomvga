/**
 * Copyright (c) 2021 Chris Moulang
 *
 * SPDX-License-Identifier: BSD-3-Clause
*/
.program test

.define public PIN_A0 2
.define PIN_1MHZ 18
.define public PIN_R_NW 19
.define public PIN_SEL1 26

; Bit masks used with side set to select 1 out of 3 8-bit bus drivers
.define ADDRESS_LOW 0b011
.define ADDRESS_HIGH 0b101
.define DATA 0b110


;.define tADDR  9    ;  9 = 60nS at 150MHz
.define tADDR 12    ; 12 = 60nS at 200MHz
;.define tADDR 15    ; 15 = 60nS at 200MHz

.side_set 3 opt
    wait 1 GPIO PIN_1MHZ                                ; ensure SM starts at beginning of a bus cycle

loop:
.wrap_target
    wait 0 GPIO PIN_1MHZ                                ; wait for clock 0

; Delay for tADDr+2 cycles
    set x tADDR             
loop_2:
    jmp x-- loop_2          side ADDRESS_LOW

; If 1MHz MOS 6502 then uncomment the following line.
;    wait 1 GPIO PIN_1MHZ           

; Read the address 8 bits at a time
    in PINS 8               side ADDRESS_HIGH           ; read address 0-7
    jmp PIN handle_read                                 ; jmp if R_NW == 1
    set x 0 [1]                                         ; 0 to indicate write
    nop [1]
    in PINS 8               side DATA                   ; read address 8-15

; Get the data and push to the FIFO
    wait 1 GPIO PIN_1MHZ                                ; wait for clock 0 -> 1
    wait 0 GPIO PIN_1MHZ                                ; wait for clock 1 -> 0
    in PINS 8               side ADDRESS_LOW            ; read data
    in x 8                                              ; auto push

    jmp loop

handle_read:
; read remainder of address and push it to the FIFO
    set x 1 [1]                                         ; 1 to indicate read
    nop [1]
    in PINS 8                                           ; read address 8-15
    in x 8
    in x 8                                              ; auto push
    wait 1 GPIO PIN_1MHZ
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void test_program_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = test_program_get_default_config(offset);
   sm_config_set_jmp_pin 	(&c, test_PIN_R_NW);
   sm_config_set_in_pins(&c, test_PIN_A0);
   sm_config_set_set_pins(&c, test_PIN_SEL1, 3);

   sm_config_set_sideset(&c, 4, true, false);
   sm_config_set_sideset_pins(&c, test_PIN_SEL1);

   sm_config_set_in_shift(&c, true, true, 32);
   pio_sm_set_consecutive_pindirs (pio, sm, test_PIN_SEL1, 3, true);
   pio_sm_init(pio, sm, offset, &c);
}

%}
